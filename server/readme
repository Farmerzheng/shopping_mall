

1、
   install express globally
     > npm install express-generator -g

   init a express project
     > express shopping_mall

   change directory:
     > cd express

   install dependencies:
     > npm install

   run the app:
     > npm start

   安装package.json中依赖的包文件 （moongose 等）
   npm install 
     

2、
  使用mongoose

  a、创建一个model文件夹，在下面新建goods.js文件
     goods文件内容如下：
        let mongoose = require("mongoose");
        let Schema = mongoose.Schema;

        let productSchema = new Schema({
            "productId": String,
            "productName": String,
            "salePrice": Number,
            "productImage": String,
            "productUrl": String
        })

        module.exports = mongoose.model("Good", productSchema);

  b、在routes文件夹下新建goods.js的路由文件

  c、修改app.js文件（增加goods路由）
     var goodsRouter = require('./routes/goods');
     app.use('/goods', goodsRouter);


3、启动服务器
   node bin/www

4、添加静态资源文件（图片资源）到public的images文件夹
   可以在http://localhost:8080/images/pingheng.jpg访问到对应的图片

5、在 vs中如何调试 node.js 
   a、关闭服务器
   b.配置launch.json
          {
        "version": "0.2.0",
        "configurations": [
            
            {
                "type": "node",
                "request": "launch",
                "name": "启动程序",
                "program": "D:/H5/node/shopping_mall/server/bin/www"
            },
            {
                "type": "node",
                "request": "attach",
                "name": "附加到端口",
                "address": "localhost",
                "port": 3000 // 和www文件端口保持一致
            }
            ]
        }

      c : 打断点
      d : 启动调试功能（单击绿三角）
      d : 在浏览器中刷新页面，重新发送请求

6、分页查询代码
        Good.find({salePrice: {$gte: 100, $lte: 500}})
            .sort({ 'salePrice': sort }) //1 是升序 -1是降序
            .limit(perPage)
            .skip((page - 1) * perPage)
            .exec(function(err, doc) {
              //将数据库拿到的doc返回给客户端
            })      

7、在app.js里面定义的为一级路由
   
    app.use('/', indexRouter);
    app.use('/users', usersRouter);
    app.use('/goods', goodsRouter);
   
   在routes/goods.js里面定义的路由为二级路由

     router.post('/addCart', function(req, res, next) {

    })
   
   注意路由路径不能写成 '/goods/addCart'

8、promise用法

        // 在数据库users集合中查找userId 对应的用户
        let findUserPromise = new Promise((resolve, reject) => {
            if (userId) {
                User.find({ "userId": userId })
                    .exec(function(err, userDoc) {
                        if (err) {
                            res.json({
                                status: "1",
                                error: err.message
                            })
                        } else {
                            resolve(userDoc)
                        }
                    })
            }
        });

        findUserPromise
            .then(function(userDoc) {
                // 在Goods模型中通过productId找到对应的商品模型
                return new Promise((resolve, reject) => {
                    Good.findOne({ 'productId': productId }, function(err, goodDoc) {
                        if (err) {
                            res.json({
                                status: "1",
                                error: err.message
                            })
                        } else {
                            let data = {
                                goodDoc: goodDoc,
                                userDoc: userDoc
                            }
                            resolve(data)
                        }
                    })
                });

            })
            .then((data) => {
                // 将商品模型插入用户模型的cartList列表

                // 假设商品数量是1
                data.goodDoc.productNum = '10000';
                // 假设商品被选中
                data.goodDoc.checked = '1';

                // 往用户模型的cartList数组中插入选中的商品模型
                data.userDoc['0'].cartList.push(data.goodDoc)
                    // 保存插入的商品模型模型
                data.userDoc['0'].save(function(err, doc) {
                    if (err) {

                        res.json({
                            status: "1",
                            error: err.message
                        })
                    } else {
                        // 将插入成功的信息返回给前端
                        res.json({
                            status: "0",
                            message: '插入成功',
                            result: ''
                        })
                    }
                })
            })


9、服务器向前端发送cookie的方法
    
        res.cookie('userId', doc.userId, {
            path: '/',
            maxAge: 1000 * 60
        })

    注：浏览器会自动存储cookie,无需前端存储

10、
// 退出接口
router.post('/logout', function(req, res, next) {

    // 将浏览器端的cookie清空
    res.cookie('userId', '', {
        path: '/',
        maxAge: -1
    })

    //返回浏览器端退出成功信息    
    res.json({
        status: '0',
        msg: '退出成功',
        result: '退出成功'
    })

})


11、
在express内部，有一个函数的数组，

每来一个请求，express内部就会执行这个数组中的对应这个请求的函数

在这个函数数组里，每个函数的签名应该像下面那样：

function(req,res){//...}
但是，实际上是：

function(req,res，next){//...}
这个next，是指下一个函数





